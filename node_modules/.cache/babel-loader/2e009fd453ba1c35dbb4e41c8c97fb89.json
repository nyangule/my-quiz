{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\desktop\\\\react-quiz\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // Components\n\nimport QuestionCard from './components/QuestionCard'; // types\n\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions();\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value; // Check answer against correct answer\n\n      const correct = questions[number].correct_answer === answer; // Add score if answer is correct\n\n      if (correct) setScore(prev => prev + 1); // Save the answer in the array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"REACT QUIZ\"), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: startTrivia,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Start\") : null, !gameOver ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 22\n    }\n  }, \"Score: \", score) : null, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 20\n    }\n  }, \"Loading Questions...\") : null, !loading && !gameOver && /*#__PURE__*/React.createElement(QuestionCard, {\n    questionNr: number + 1,\n    totalQuestions: TOTAL_QUESTIONS,\n    question: questions[number].question,\n    answers: questions[number].answers,\n    userAnswer: userAnswers ? userAnswers[number] : undefined,\n    callback: checkAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"next\",\n    onClick: nextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Next Question\") : null));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/acer/desktop/react-quiz/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","GlobalStyle","Wrapper","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","newQuestions","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","nextQ","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { fetchQuizQuestions } from './API';\r\n// Components\r\nimport QuestionCard from './components/QuestionCard';\r\n// types\r\nimport QuestionsState from './API';\r\n// Styles\r\nimport { GlobalStyle, Wrapper } from './App.styles';\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App: React.FC = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n  const startTrivia = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n    const newQuestions = await fetchQuizQuestions(\r\n    );\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkAnswer = (e: any) => {\r\n    if (!gameOver) {\r\n      // User's answer\r\n      const answer = e.currentTarget.value;\r\n      // Check answer against correct answer\r\n      const correct = questions[number].correct_answer === answer;\r\n      // Add score if answer is correct\r\n      if (correct) setScore((prev) => prev + 1);\r\n      // Save the answer in the array for user answers\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    // Move on to the next question if not the last question\r\n    const nextQ = number + 1;\r\n\r\n    if (nextQ === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    } else {\r\n      setNumber(nextQ);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper>\r\n        <h1>REACT QUIZ</h1>\r\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n          <button className='start' onClick={startTrivia}>\r\n            Start\r\n          </button>\r\n        ) : null}\r\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\r\n        {loading ? <p>Loading Questions...</p> : null}\r\n        {!loading && !gameOver && (\r\n          <QuestionCard\r\n            questionNr={number + 1}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n            question={questions[number].question}\r\n            answers={questions[number].answers}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            callback={checkAnswer}\r\n          />\r\n        )}\r\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\r\n          <button className='next' onClick={nextQuestion}>\r\n            Next Question\r\n          </button>\r\n        ) : null}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}